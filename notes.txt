----------------- 4 -----------------
We declare a variable and then we initialize it by assigning a variable to it.
If we need to create a variable but don't know what to put in yet - we should assign it to the default.

----------------- 5 -----------------
Superglobal (predefined) variables are available everywhere in our code.
Usually if you're trying ot get data from database or get the data that you want to show the user we should use a GET method.
And if we want to submit data to the website or to a database inside of website then we use a POST method.
_REQUEST method looks in GET, POST, and cookies when it's looking for data.
But it's not great for security, so it's best to stick to GET or POST.

----------------- 6 -----------------
POST: when user submits data.
GET: to show something to the user.

Never trust the data the user is submitting! We can use htmlspecialchars($_POST["firstname"]); for example. It'll turn characters into html entities, for example "&" will become "&amp;" so the code that the user tried to inject won't run. There's also htmlentities(); that we can use. It converts all the characters into html if it can.

We should check if the form was filled out on the backend, too! Using "required" attribute is not enough. It's in the html, so the user can get access to it simply by opening DevTools and deleting the "required" from the markup. That'll allow the user to submit empty form.

In php we can check it like this:
if (empty($firstname)) {
   header("Location: ../index.php");
   exit();
}

----------------- 7 -----------------
| - pipe symbol (or vertical line, vertical slash, upright slash)

Logical operators precedence (first to last):
!
&&
||

----------------- 8 -----------------
match is available since php 8

$result = match($a) {
   1, 3, 5 => "Variable a is equal to one or three or five!",
   2 => "Variable a is equal to two!",
   default => "None were a match!",
};

So basically if $a is STRICTLY equal to 1 or 3 or 5 $result will be assigned to whatever's after the =>.
Each line HAS to have comma at the end.

----------------- 9 -----------------
A way to sanitize from action: 
<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">

A way to sanitize a float number from an input:
$num01 = filter_input(INPUT_POST, "num01", FILTER_SANITIZE_NUMBER_FLOAT);

A way to sanitize option from select:
$operator = htmlspecialchars($_POST["operator"]);

htmlspecialchars will turn "<123"456&mynameisdaniel.789" into "&lt;123&quot;456&amp;mynameisdaniel.789"
FILTER_SANITIZE_NUMBER_FLOAT will turn "<123"456&mynameisdaniel.789" into "123456.789"

----------------- 10 -----------------
Since PHP 8 we can use trailing comma, so we can write arrays like this: $arr = [1, 2, 3,]
To add a value to the end of an array we do this: $arr[] = "Something"
To replace a value in an array we do this: $arr[2] = "Something"

Deleting an item from array while preserving its place: unset($arr[1]);
Deleting an item from array while moving everything else into its place: array_splice($arr, 0, 1); - it deletes 1 item after $arr[0], so only item $arr[1]
Inserting an item into an array: array_splice($arr, 2, 0, "smth"); - will insert "smth" after $arr[1], so it'll take place of $arr[2], sort of pushing the original $arr[2] further, into $arr[3].
You can easily insert items from one array into another like this: array_splice($arr1, 2, 0, $arr2); It'll spread automatically and won't create a multidimensional array.

array_push does NOT work with associative arrays, only with indexed ones.
In associative array we can only do $arr["smth"] = "value";

----------------- 12 -----------------
function sayHello($name = "John") {
   return "Hello " . $name . "!";
}
"John" is a default paramenter. If we don't specify it - we can't use our function without passing in the parameters, so for example $test =  sayHello("Jane"); will throw an error.

Type declaration (since PHP 7):
declare(strict_types=1); //first line of code in the file
function sayHello(string $name) {}
If we call sayHello(123); we'll get a fatal error.

----------------- 13 -----------------
4 types of scopes in PHP:
- global
- local - e.g. inside of function (cannot be accessed from the outside)
- class scoped
- static scope

To get access to a global variable inside of a function, we can do:
1. (the best way)
   $a = "a";
   function sayA($a) {
      echo $a;
   }

2.
   $a = "a";
   function sayA() {
      global $a;
      echo $a;
   }

3.
   $a = "a";
   function sayA() {
      global $a;
      return $GLOBALS["a"];
   }
   echo sayA();

   Static variable won't be reset when we call the function that uses it again. So if the function changes the value of a variable we'll get a new result each time, because the variable will be changed form the last time.

----------------- 14 -----------------
Constants in PHP are declared like this:

define("PI", 3.14);

They can be accessed from anywhere without stating that it's a global variable:

function test() {
   echo PI;
}
test(); // works!